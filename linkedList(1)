class Node:
    def __init__(self, value, prev=None, next=None):
        self.value = value
        self.prev = prev
        self.next = next

    def __str__(self):
        return str(self.value)


class LinkedList:
    def __init__(self):
        self.__size__ = 0
        self.head = self.tail = None

    def push(self, value):
        node = Node(value)

        if self.__size__ == 0:
            self.head = self.tail = node
        else:
            node.prev = self.tail
            self.tail.next = node
            self.tail = node

        self.__size__ += 1

    def pop(self):
        value = self.tail

        if self.__size__ == 1:
            self.head = self.tail = None
        elif self.__size__ > 1:
            value.prev.next = None
            self.tail = value.prev
            value.prev = None

        if value is not None:
            self.__size__ -= 1
            return value

    def unshift(self, value):
        node = Node(value)

        if self.__size__ == 0:
            self.head = self.tail = node
        else:
            self.head.prev = node
            node.next = self.head
            self.head = node

        self.__size__ += 1

    def shift(self):
        value = self.head

        if self.__size__ == 1:
            self.head = self.tail = None
        elif self.__size__ > 1:
            value.next.prev = None
            self.head = value.next
            value.next = None

        if value is not None:
            self.__size__ -= 1
            return value

    def insert(self, index, value):
        if index < 0:
            return

        if index == 0:
            self.unshift(value)
        elif index >= self.__size__:
            self.push(value)
        else:
            prev = self.get(index - 1)
            next = prev.next

            node = Node(value, prev, next)
            prev.next = node
            next.prev = node
            self.__size__ += 1

    def find(self, v):
        for i in self:
            if i.value == v:
                return i

    def get(self, index):
        if 0 <= index <= self.__size__ - 1:
            current = 0

            for i in self:
                if current == index:
                    return i
                current += 1

    def __iter__(self):
        self.current = self.head
        return self

    def __next__(self):
        try:
            value = self.current
            self.current = self.current.next
            return value
        except AttributeError:
            raise StopIteration

    def size(self):
        return self.__size__

    def print(self):
        forward = ''
        reversed = str(self.tail) + ' '

        for i in self:
            forward += str(i) + ' '

        current = self.tail
        while current.prev is not None:
            current = current.prev
            reversed += str(current) + ' '

        print('{}\n{}'.format(reversed.strip(), forward.strip()))


if __name__ == '__main__':
    length = int(input())
    ll = LinkedList()

    if length > 0:
        vals = list(map(float, input().split()))
        for val in vals:
            ll.push(val)

    n = int(input())
    actions = [input() for i in range(n)]

    for action in actions:
        args = action.split()

        if len(args) == 1:
            getattr(ll, args[0])()
        elif len(args) == 2:
            getattr(ll, args[0])(float(args[1]))
        elif len(args) == 3:
            getattr(ll, args[0])(int(args[1]), float(args[2]))

    ll.print()

