class Query:
    def __init__(self, value, next=None):
        self.value = value
        self.next = next

    def __str__(self):
        return str(self.value)


class Queue:
    def __init__(self, length):
        self.head = self.tail = None
        self.length = length
        self.__size__ = 0

    def push(self, value):
        if self.__size__ == self.length:
            self.pop()

        if self.__size__ == 0:
            self.head = self.tail = Query(value)
        elif self.__size__ >= 1:

            query = Query(value)
            self.tail.next = query
            self.tail = query

        self.__size__ += 1

    def pop(self):
        value = self.head

        if self.__size__ == 1:
            self.head = self.tail = None
        elif self.__size__ > 1:
            self.head = value.next
            value.next = None

        if value is not None:
            self.__size__ -= 1

        return value

    def __iter__(self):
        self.current = self.head
        return self

    def __next__(self):
        try:
            value = self.current
            self.current = self.current.next
            return value
        except AttributeError:
            raise StopIteration

    def __str__(self):
        return ' '.join([str(q) for q in self])


if __name__ == '__main__':
    length = int(input())
    n = int(input())
    actions = [input() for i in range(n)]

    q = Queue(length)

    for action in actions:
        action = action.split()

        if action[0] == 'push':
            q.push(float(action[1]))
        elif action[0] == 'pop':
            q.pop()

    print(q)
